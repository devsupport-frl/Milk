"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_linear_gradient_1 = __importDefault(require("react-native-linear-gradient"));
const styles_1 = __importDefault(require("./styles"));
class EmojiDialog extends React.Component {
    constructor(props) {
        super(props);
        this.getButtons = () => {
            const buttonsContainer = this.props.type === 'primary' ? styles_1.default.primaryContainer : styles_1.default.secondaryContainer;
            const buttonStyle = this.props.type === 'primary' ? styles_1.default.primaryButton : [styles_1.default.secondaryButton];
            if (this.props.type === 'secondary')
                buttonStyle.button = {
                    color: this.props.colors ? this.props.colors[0] : this.props.emoji.colors[0],
                    fontWeight: 'bold',
                };
            return this.props.button ? (<react_native_1.View style={[styles_1.default.buttons, buttonsContainer]}>
            <react_native_1.TouchableWithoutFeedback onPress={this.props.button.onClick}>
               <react_native_1.View style={[styles_1.default.button, buttonStyle]}>
                  <react_native_1.Text key={this.props.button.id} style={buttonStyle.button} onPress={this.props.button.onClick}>
                     {this.props.button.text}
                  </react_native_1.Text>
               </react_native_1.View>
            </react_native_1.TouchableWithoutFeedback>
         </react_native_1.View>) : (undefined);
        };
        this.state = {
            fadingValue: new react_native_1.Animated.Value(0),
            visible: false,
        };
    }
    /***
     * TODO:
     * This function will be change with getDerivedStateFromProps
     * when React releases the new major version is 17.x.x
     */
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (nextProps.visible) {
            this.setState({ visible: true });
        }
        react_native_1.Animated.timing(this.state.fadingValue, {
            toValue: nextProps.visible ? 1 : 0,
            duration: 300,
        }).start(() => this.setState({
            visible: nextProps.visible,
        }));
    }
    render() {
        const { type, emoji, title, message, size, button, colors, onBackgroundClick } = this.props;
        const emojiSize = size ? size : 55;
        const gradientStyle = button
            ? type === 'primary'
                ? { paddingVertical: 15 }
                : { paddingBottom: 50 }
            : { paddingBottom: 20, fontSize: 17 };
        return this.state.visible ? (<React.Fragment>
            <react_native_1.TouchableWithoutFeedback onPress={onBackgroundClick}>
               <react_native_1.Animated.View style={[
            {
                opacity: this.state.fadingValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: [0, 1],
                }),
                transform: [
                    {
                        scale: this.state.fadingValue.interpolate({
                            inputRange: [0, 1],
                            outputRange: [1, 1],
                        }),
                    },
                ],
            },
            styles_1.default.container,
        ]}>
                  <react_native_1.TouchableWithoutFeedback>
                     <react_native_1.View style={styles_1.default.containerContent}>
                        <react_native_1.View style={[styles_1.default.emoji, { top: (emojiSize / 2) * -1 }]}>
                           <React.Suspense fallback={<react_native_1.View />}>
                              <react_native_1.Image source={emoji.content} style={{ height: emojiSize, width: emojiSize }}></react_native_1.Image>
                           </React.Suspense>
                        </react_native_1.View>
                        <react_native_linear_gradient_1.default start={{ x: 0.0, y: 1.0 }} end={{ x: 1.0, y: 0.0 }} colors={colors ? colors : emoji.colors} style={[styles_1.default.gradientBg, gradientStyle]}>
                           <react_native_1.View style={[styles_1.default.content]}>
                              <react_native_1.Text style={styles_1.default.title}>{title}</react_native_1.Text>
                              <react_native_1.Text style={styles_1.default.message}>{message}</react_native_1.Text>
                           </react_native_1.View>

                           {type === 'primary' ? this.getButtons() : undefined}
                        </react_native_linear_gradient_1.default>

                        {type === 'secondary' ? this.getButtons() : undefined}
                     </react_native_1.View>
                  </react_native_1.TouchableWithoutFeedback>
               </react_native_1.Animated.View>
            </react_native_1.TouchableWithoutFeedback>
         </React.Fragment>) : null;
    }
}
exports.default = EmojiDialog;
//# sourceMappingURL=index.js.map